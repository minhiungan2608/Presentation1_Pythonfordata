# -*- coding: utf-8 -*-
"""Presentation_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k82JJxrGdmUiFLeHNXUN3M9nqKSHkSYo
"""

import requests

API_KEY = "68fe9976bc76e1ef78083eb812e01222"
LAT, LON = 35.6895, 139.6917  # Tokyo

url = f"https://api.openweathermap.org/data/2.5/forecast?lat={LAT}&lon={LON}&units=metric&appid={API_KEY}"
r = requests.get(url)
print(r.status_code)
print(r.json())

#IMPORT LIBRARIES
import requests
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
from scipy import stats
import numpy as np

#API SETUP
API_KEY = "68fe9976bc76e1ef78083eb812e01222"
CITY = "Tokyo"
URL = f"https://api.openweathermap.org/data/2.5/forecast?q={CITY}&appid={API_KEY}&units=metric"

#FETCH DATA
response = requests.get(URL)
data = response.json()

records = []
for item in data["list"]:
    records.append({
        "datetime": datetime.fromtimestamp(item["dt"]),
        "temp": item["main"]["temp"],
        "humidity": item["main"]["humidity"],
        "pressure": item["main"]["pressure"],
        "wind_speed": item["wind"]["speed"]
    })

df = pd.DataFrame(records)
today = datetime.now().date()
df["type"] = df["datetime"].apply(lambda x: "today" if x.date() == today else "forecast")

print(f"{len(df)} records ({df['datetime'].min()} → {df['datetime'].max()})")

df.info()
df.describe()

#VISUALIZATION 1: TEMPERATURE TREND
plt.figure(figsize=(10,5))
plt.plot(df["datetime"], df["temp"], color="orange", label="Temperature (°C)")
plt.title(f"{CITY} Temperature Forecast (Next 5 Days)")
plt.xlabel("Datetime")
plt.ylabel("Temperature (°C)")
plt.grid(True)
plt.legend()
plt.show()

#HYPOTHESIS 1: TODAY vs FORECAST TEMPERATURE
hist_temp = df[df["type"] == "today"]["temp"]
forecast_temp = df[df["type"] == "forecast"]["temp"]

if len(hist_temp) > 1 and len(forecast_temp) > 1:
    t_stat, p_val = stats.ttest_ind(hist_temp, forecast_temp, equal_var=False)
    print("---- Hypothesis 1 ----")
    print(f"T-statistic = {t_stat:.3f}, p-value = {p_val:.3f}")
    if p_val < 0.05:
        print("Reject H₀ → Significant difference between today & forecast temps.")
    else:
        print("Fail to reject H₀ → No significant difference between today & forecast temps.")
else:
    print("Not enough data for t-test (today/forecast).")

#HYPOTHESIS 2: TEMP vs HUMIDITY
print("\n---- Hypothesis 2 ----")
r_th, p_th = stats.pearsonr(df["temp"], df["humidity"])
print(f"Correlation (r) = {r_th:.3f}, p-value = {p_th:.3f}")
if p_th < 0.05:
    direction = "negative" if r_th < 0 else "positive"
    print(f"Reject H₀ → Significant {direction} correlation between temp and humidity.")
else:
    print("Fail to reject H₀ → No significant correlation between temp and humidity.")

# Visualization
plt.figure(figsize=(6,5))
plt.scatter(df["temp"], df["humidity"], alpha=0.6, color="teal")
plt.title("Temperature vs Humidity")
plt.xlabel("Temperature (°C)")
plt.ylabel("Humidity (%)")
plt.grid(True)
plt.show()

#HYPOTHESIS 3: TEMP vs WIND SPEED
print("\n---- Hypothesis 3 ----")
r_tw, p_tw = stats.pearsonr(df["temp"], df["wind_speed"])
print(f"Correlation (r) = {r_tw:.3f}, p-value = {p_tw:.3f}")
if p_tw < 0.05:
    direction = "positive" if r_tw > 0 else "negative"
    print(f"Reject H₀ → Significant {direction} correlation between temp and wind speed.")
else:
    print("Fail to reject H₀ → No significant relationship between temp and wind speed.")

# Visualization
plt.figure(figsize=(6,5))
plt.scatter(df["temp"], df["wind_speed"], alpha=0.6, color="purple")
plt.title("Temperature vs Wind Speed")
plt.xlabel("Temperature (°C)")
plt.ylabel("Wind Speed (m/s)")
plt.grid(True)
plt.show()

#HYPOTHESIS 4: PRESSURE VARIATION
print("\n---- Hypothesis 4 ----")
df["date"] = df["datetime"].dt.date
daily_mean_pressure = df.groupby("date")["pressure"].mean()
pressure_var = np.var(daily_mean_pressure)
print(f"Daily mean pressure variance = {pressure_var:.2f}")

if pressure_var > 3:  # threshold chosen empirically
    print("Reject H₀ → Significant variation in daily pressure.")
else:
    print("Fail to reject H₀ → Pressure remains stable across forecast period.")

plt.figure(figsize=(8,5))
plt.plot(daily_mean_pressure.index, daily_mean_pressure.values, marker="o", color="skyblue")
plt.title("Daily Mean Atmospheric Pressure (Tokyo)")
plt.xlabel("Date")
plt.ylabel("Pressure (hPa)")
plt.grid(True)
plt.show()

# Conclusion